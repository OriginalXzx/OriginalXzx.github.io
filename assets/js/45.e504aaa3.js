(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{467:function(t,_,v){"use strict";v.r(_);var a=v(1),r=Object(a.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),v("p",[t._v("最早接触计算机应该是初中的时候，每次提到计算机课就无比的的激动，因为又可以玩“暴力摩托”了。有了计算机我们生活发生了巨大的变化，打游戏，上网，聊天，甚至到现在以此为业。有时无不感叹计算机的强大。计算机的发展也是随着科技的发展经历了机械计算机、电子计算机、晶体管计算机、小规模集成电路和超大规模集成电路计算机。我们无意讨论整个计算机的发展过程，主要还是介绍基于冯诺依曼体系结构的现代计算机。")]),t._v(" "),v("h2",{attrs:{id:"_1-计算机的发展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机的发展"}},[t._v("#")]),t._v(" 1. 计算机的发展")]),t._v(" "),v("p",[t._v("计算机的发展包括了硬件和软件的发展，硬件的发展为计算机提供了更快的处理速度，而软件的发展为用户提供了更好的体验。两者相辅相成，密不可分。")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("第一阶段：")]),t._v(" 60年代中期以前，是计算机系统发展的早期时代。在这个时期通用硬件已经相当普遍，软件却是为每个具体应用而专门编写的，大多数人认为软件开发是无需预先计划的事情。这时的软件实际上就是规模较小的程序，程序的编写者和使用者往往是同一个(或同一组)人；")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("第二阶段：")]),t._v(" 从60年代中期到70年代中期，是计算机系统发展的第二代。在这10年中计算机技术有了很大进步。多道程序、多用户系统引入了人机交互的新概念，开创了计算机应用的新境界，使硬件和软件的配合上了一个新的层次；")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("第三阶段：")]),t._v(" 计算机系统发展的第三代从20世纪70年代中期开始，并且跨越了整整10年。在这10年中计算机技术又有了很大进步。分布式系统极大地增加计算机系统的复杂性，局域网、广域网、宽带数字通信以及对“即时”数据访问需求的增加，都对软件开发者提出了更高的要求；")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("第四阶段：")]),t._v(" 在计算机系统发展的第四代已经不再看重单台计算机和程序，人们感受到的是硬件和软件的综合效果。由复杂操作系统控制的强大的桌面机及局域网和广域网，与先进的应用软件相配合，已经成为当前的主流。计算机体系结构已迅速地从集中的主机环境转变成分布的客户机/服务器。")])])]),t._v(" "),v("h2",{attrs:{id:"_2-计算机基本原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算机基本原理"}},[t._v("#")]),t._v(" 2. 计算机基本原理")]),t._v(" "),v("p",[t._v("Copy了点计算机的发展历史，现在可以来看看计算机的基本工作原理了。现代计算机，大部分都是基于冯诺依曼体系结构，而我们这里谈论的也是此问前提。 "),v("strong",[t._v("冯诺依曼的核心是：存储程序，顺序执行。")]),t._v(" 所以不管计算机如何发展，基本原理是相同的。计算机程序实际上是告诉计算机做什么。")]),t._v(" "),v("h3",{attrs:{id:"_2-1-冯诺依曼体系结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-冯诺依曼体系结构"}},[t._v("#")]),t._v(" 2.1 冯诺依曼体系结构")]),t._v(" "),v("p",[t._v("冯诺依曼体系结构有以下特点：")]),t._v(" "),v("ol",[v("li",[t._v("计算机处理的数据和指令一律用二进制数表示；")]),t._v(" "),v("li",[t._v("指令和数据不加区别混合存储在同一个存储器中；")]),t._v(" "),v("li",[t._v("顺序执行程序的每一条指令；")]),t._v(" "),v("li",[t._v("计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成。")])]),t._v(" "),v("p",[t._v("冯诺依曼体系结构的计算机必须具有如下功能：")]),t._v(" "),v("ul",[v("li",[t._v("把需要的程序和数据送至计算机中；")]),t._v(" "),v("li",[t._v("必须具有长期记忆程序、数据、中间结果及最终运算结果的能力；")]),t._v(" "),v("li",[t._v("能够完成各种算术、逻辑运算和数据传送等数据加工处理的能力；")]),t._v(" "),v("li",[t._v("能够根据需要控制程序走向，并能根据指令控制机器的各部件协调操作；")]),t._v(" "),v("li",[t._v("能够按照要求将处理结果输出给用户。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"/computer.png",alt:"计算机运行原理图"}})]),t._v(" "),v("h3",{attrs:{id:"_2-2-计算机工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-计算机工作原理"}},[t._v("#")]),t._v(" 2.2 计算机工作原理")]),t._v(" "),v("p",[t._v("对于我们现代计算机来说，最关键的2个部件就是CPU和内存。内存存储了要执行的程序指令，而CPU就是用来执行这些指令。CPU首先要知道这些指定存放在存储器的那个区域，然后才能执行，并且把执行的结果写入到执行区域。")]),t._v(" "),v("h4",{attrs:{id:"_2-2-1-cpu指令和编程语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-cpu指令和编程语言"}},[t._v("#")]),t._v(" 2.2.1 CPU指令和编程语言")]),t._v(" "),v("p",[t._v("在了解CPU和存储器工作原理之前，先来了解一下CPU指令和我们编程语言之间的一些关系。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-1-1-cpu指令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-1-cpu指令"}},[t._v("#")]),t._v(" 2.2.1.1 CPU指令")]),t._v(" "),v("p",[t._v("因为在计算机中指令和数据都用二进制来表示，也就是说它只认识0和1这样的数字。最早期的计算机程序通过在纸带上打洞来人工操操作的方式来模拟0和1，根据不同的组合来完成一些操作。后来直接通过直0和1编程程序，这种称之为机器语言。这里就会有一个疑问，"),v("strong",[t._v("计算机怎么知道你这些组合的意思？")]),t._v(" "),v("img",{attrs:{src:"/cpu.png",width:"400",hegiht:"213",align:"center/"}})]),t._v(" "),v("p",[t._v("于是就出现了CPU指令，我们现在买CPU都会听到指令集这一说。CPU指令其实就对应了我们这里说的0和1的一些组合。每款CPU在设计时就规定了一系列与其硬件电路相配合的指令系统。有了CPU指令集的文档你就可以通过这个编写CPU认识的机器代码了。所以对于不同CPU来说可能会有不同的机器码。比如下面我们就定义了一套我们CPU硬件电路可以完成的CPU指令。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("指令")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("格式")]),t._v(" "),v("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("0011")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[register1][register2]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("加法操作")])]),t._v(" "),v("tr",[v("td",[t._v("0010")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[register][address]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("写入寄存器的值到存储器")])]),t._v(" "),v("tr",[v("td",[t._v("0001")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[address][register]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("读取存储取值到寄存器")])])])]),t._v(" "),v("p",[t._v("随着计算机的发展，CPU支持的指令也越来越多，功能也越来越强，上图就是现在Core I5处理器支持的指令集。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-1-2-汇编语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-2-汇编语言"}},[t._v("#")]),t._v(" 2.2.1.2 汇编语言")]),t._v(" "),v("p",[t._v("使用0和1这样的机器语言好处是CPU认识，可以直接执行，但是对于程序本身来说，没有可读性，难以维护，容易出错。所以就出现了汇编语言，它用助记符(代替操作码指令，用地址符号代替地址码。实际是对机器语言的一种映射，可读性高。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("指令")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("汇编指令")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("格式")]),t._v(" "),v("th",{staticStyle:{"text-align":"right"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("0001")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("READ")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[addLable][regLab]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("读取存储取值到寄存器")])]),t._v(" "),v("tr",[v("td",[t._v("0010")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("WRITE")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[addLable][regLab]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("写入寄存器的值到存储器")])]),t._v(" "),v("tr",[v("td",[t._v("0011")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("ADD")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("[var1][var2]")]),t._v(" "),v("td",{staticStyle:{"text-align":"right"}},[t._v("加法操作")])])])]),t._v(" "),v("p",[t._v("把汇编语言转换为机器语言需要一个叫做汇编器的工具。对于目前的CPU厂商，在推出的CPU指令时都会同时退出新的"),v("strong",[t._v("汇编器")]),t._v("。如果你还在使用老版本的汇编器那么只能使用机器码来使用新的指令了。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-1-3-高级语言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-3-高级语言"}},[t._v("#")]),t._v(" 2.2.1.3 高级语言")]),t._v(" "),v("p",[t._v("汇编语言的出现大大提高了编程效率，但是有一个问题就是不同CPU的指令集可能不同，这样就需要为不同的CPU编写不同的汇编程序。于是又出现了高级语言比如C，或者是后来的C++,JAVA,C#。 高级语言把多条汇编指令合成成为了一个表达式，并且去除了许多操作细节（比如堆栈操作，寄存器操作），而是以一种更直观的方式来编写程序，而面向对象的语言的出现使得程序编写更加符合我们的思维方式。我们不必把尽力放到低层的细节上，而更多的关注程序的本身的逻辑的实现。")]),t._v(" "),v("p",[t._v("对于高级语言来说需要一个"),v("strong",[t._v("编译器")]),t._v("来完成高级语言到汇编语言的转换。所以对比不同的CPU结构，只需要有不同编译器和汇编器就能使得我们的程序在不同CPU上都能运行了。如下图在VS2010中，我们可以选择程序编译的目标平台，X86，X64，ARM等。当然除了这些编译类的语言之外还有解释类型的语言如JS，就不在此讨论范围内。")]),t._v(" "),v("img",{attrs:{src:"/vs2010.png",width:"400",hegiht:"213",align:"center/"}}),t._v(" "),v("p",[t._v("到这里有一个疑问："),v("strong",[t._v("当CPU的指令集更新后高级语言会有什么影响和变化？")]),t._v(" 对于目前来说，一般出现了新的指令，会有对应的新的汇编器和编译器。所以编译器可以把一些高级语言的表达式编译成新的汇编指令，这样对于高级来说不会有任何变化； 当然还有一种情况就是高级语言会增加新的语法来对应一些新的汇编语言和指令。但是这种情况出现的几率很小。所以如果编译器不支持新的指令，那么只有只用汇编会来实现了。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-1-4-小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-4-小结"}},[t._v("#")]),t._v(" 2.2.1.4 小结")]),t._v(" "),v("p",[t._v("从上面的我们可以看出，我们写的程序最终都将变成机器认识的二进制可执行程序，然后加载到内存顺序的执行。 从机器码到汇编到高级语言，我们可以看到计算机中无处不在的分层，抽象的思想。不光光是软件，硬件同样适用。最后留下一个问题在这里： "),v("strong",[t._v("C#和JAVA程序编译出来的文件不是二进制的机器码，而是中间语言，那么他们又是怎么运行的呢？")])]),t._v(" "),v("h4",{attrs:{id:"_2-2-2-cpu工作原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-cpu工作原理"}},[t._v("#")]),t._v(" 2.2.2 cpu工作原理")]),t._v(" "),v("p",[t._v("前面已经了解了现代计算机的大致结构，也知道CPU是按照CPU指令来执行操作，那么就看看CPU的结构和他是如何执行顺序操作的。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-2-1-cpu功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-1-cpu功能"}},[t._v("#")]),t._v(" 2.2.2.1 CPU功能")]),t._v(" "),v("ol",[v("li",[t._v("指令控制： 指令控制也称为程序的顺序控制，控制程序严格按照规定的顺序执行。")]),t._v(" "),v("li",[t._v("操作控制： 将取出的指令的产生一系列的控制信号(微指令)，分别送往相应的部件，从而控制这些部件按指令的要求进行工作。")]),t._v(" "),v("li",[t._v("时间控制： 有些控制信号在时间上有严格的先后顺序，如读取存储器的数据，只有当地址线信号稳定以后，才能通过数据线将所需的数据读出，否则读出的数据是    不正确的数据，这样计算机才能有条不紊地工作。")]),t._v(" "),v("li",[t._v("数据加工： 所谓数据加工，就是对数据进行算术运算和逻辑运算处理。 所谓数据加工，就是对数据进行算术运算和逻辑运算处理")])]),t._v(" "),v("h5",{attrs:{id:"_2-2-2-2-cpu基本组成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-2-cpu基本组成"}},[t._v("#")]),t._v(" 2.2.2.2 CPU基本组成")]),t._v(" "),v("p",[t._v("以前CPU主要由"),v("strong",[t._v("运算器")]),t._v("和"),v("strong",[t._v("控制器")]),t._v("两大部分组成，随着集成电路的发展，目前CPU芯片集成了一些其它逻辑功能部件来扩充CPU的功能，如浮点运算器、内存管理单元、cache和MMX等。下面2张图分别是8086和Pentium CPU的结构图。")]),t._v(" "),v("img",{attrs:{src:"/8086cpu.png",width:"500",hegiht:"213",align:"center/"}}),t._v(" "),v("img",{attrs:{src:"/pentium.png",width:"500",hegiht:"213",align:"center/"}}),t._v(" "),v("p",[t._v("对于一个通用的CPU来说，我们只需要关注他的核心部件"),v("strong",[t._v("算数逻辑单元")]),t._v("和"),v("strong",[t._v("操作控制单元")]),t._v("。")]),t._v(" "),v("img",{attrs:{src:"/cpustrature.png",width:"700",align:"center/"}}),t._v(" "),v("blockquote",[v("ol",[v("li",[t._v("控制器的组成和功能： 控制器由"),v("strong",[t._v("程序计数器")]),t._v("、"),v("strong",[t._v("指令寄存器")]),t._v("、"),v("strong",[t._v("指令译码器")]),t._v("、"),v("strong",[t._v("时序产生器")]),t._v("和"),v("strong",[t._v("操作控制器")]),t._v("组成。它是计算机指挥系统，完成计算机的指挥工作。尽管不同计算机的控制器结构上有很大的区别，当就其基本功能而言，具有如下功能")])])]),t._v(" "),v("ul",[v("li",[t._v("取指令 从内存中取出当前指令，并生成下一条指令在内存中的地址。")]),t._v(" "),v("li",[t._v("分析指令 指令取出后，控制器还必须具有两种分析的功能。一是对指令进行译码或测试，并产生相应的操作控制信号，以便启动规定的动作。比如一次内存读/写操作，一个算术逻辑运算操作，或一个输入/输出操作。二是分析参与这次操作的各操作数所在的地址，即操作数的有效地址。")]),t._v(" "),v("li",[t._v("执行指令 控制器还必须具备执行指令的功能，指挥并控制CPU、内存和输入/输出设备之间数据流动的方向，完成指令的各种功能。")]),t._v(" "),v("li",[t._v("发出各种微操作命令 在指令执行过程中，要求控制器按照操作性质要求，发出各种相应的微操作命令，使相应的部件完成各种功能。")]),t._v(" "),v("li",[t._v("改变指令的执行顺序 在编程过程中，分支结构、循环结构等非顺序结构的引用可以大大提供编程的工作效率。控制器的这种功能可以根据指令执行后的结果，确定下一步是继续按原程序的顺序执行，还是改变原来的执行顺序，而转去执行其它的指令。")]),t._v(" "),v("li",[t._v("控制程序和数据的输入与结果输出 这实际也是一个人机对话的设计，通过编写程序，在适当的时候输入数据和输出程序的结果。")]),t._v(" "),v("li",[t._v("对异常情况和某些请求的处理 当计算机正在执行程序的过程中，发生了一些异常的情况，例如除法出错、溢出中断、键盘中断等。")])]),t._v(" "),v("blockquote",[v("ol",{attrs:{start:"2"}},[v("li",[t._v("运算器的组成和功能： 运算器由算术逻辑单元（ALU）、累加寄存器、数据缓冲寄存器和状态条件寄存器组成，它是数据加工处理部件，完成计算机的各种算术和逻辑运算。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作都是由控制器发出的控制信号来指挥的，所以它是执行部件。运算器有两个主要功能：")])])]),t._v(" "),v("ul",[v("li",[t._v("执行所有的算术运算，如加、减、乘、除等基本运算及附加运算；")]),t._v(" "),v("li",[t._v("执行所有的逻辑运算，并进行逻辑测试，如与、或、非、零值测试或两个值的比较等。")])]),t._v(" "),v("h5",{attrs:{id:"_2-2-2-3-cpu工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-3-cpu工作流程"}},[t._v("#")]),t._v(" 2.2.2.3 CPU工作流程")]),t._v(" "),v("p",[t._v("CPU的基本工作是执行存储的指令序列，即程序。程序的执行过程实际上是不断地取出指令、分析指令、执行指令的过程。几乎所有的冯•诺伊曼型计算机的CPU，其工作都可以分为5个阶段：取指令、指令译码、执行指令、访存取数和结果写回。")]),t._v(" "),v("img",{attrs:{src:"/cpurun.png",align:"center/"}}),t._v(" "),v("h5",{attrs:{id:"_2-2-2-4-指令周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-4-指令周期"}},[t._v("#")]),t._v(" 2.2.2.4 指令周期")]),t._v(" "),v("ul",[v("li",[t._v("指令周期： CPU取出一条指令并执行该指令所需的时间称为指令周期。指令周期的长短与指令的复杂程度有关。")]),t._v(" "),v("li",[t._v("CPU周期：从主存读取一条指令的最短时间来规定CPU周期。指令周期常常用若干个CPU周期数来表示。")]),t._v(" "),v("li",[t._v("时钟周期：时钟周期是处理操作的最基本时间单位，由机器的主频决定。一个CPU周期包含有若干个时钟周期。")])]),t._v(" "),v("img",{attrs:{src:"/cputime.png",align:"center/"}}),t._v(" "),v("p",[t._v("从上面的定义可以知道，对于CPU来说取出和执行任何一条指令所需的最短时间为两个CPU周期。所以频率越高，那么时钟周期越短，这样CPU周期和指令周期也就越短，理论上程序执行的速度也越快。但是频率不能无限的提高，而且频率的提高也带来了功耗，发热等问题，所以目前也有超线程，流水线等技术来提高CPU执行的速度。")]),t._v(" "),v("h5",{attrs:{id:"_2-2-2-5-时序发生器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-5-时序发生器"}},[t._v("#")]),t._v(" 2.2.2.5 时序发生器")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("时序信号： 在计算机高速运行的过程中，计算机内各部件的每一个动作都必须严格遵守时间规定，不能有任何差错。计算机内各部件的协调动作需要时间标志，而 时间标志则是用时序信号来体现的。计算机各部分工作所需的时序信号，在CPU中统一由时序发生器来产生。")])]),t._v(" "),v("li",[v("p",[t._v("时序发生器： 时序信号发生器是产生指令周期控制时序信号的部件，当CPU开始取指令并执行指令时，操作控制器利用时序信号发生器产生的定时脉冲的顺序和不同的脉冲间隔，提供计算机各部分工作时所需的各种微操作定时控制信号，有条理、有节奏地指挥机器各个部件按规定时间动作。")])])]),t._v(" "),v("p",[t._v("在这里有一个疑问："),v("strong",[t._v("指令和数据都存放在内存中，那么CPU怎么区分是指令还是数据呢？")])]),t._v(" "),v("p",[t._v("从时间上来说，取指令事件发生在指令周期的第一个CPU周期中，即发生在“取指令”阶段，而取数据事件发生在指令周期的后面几个CPU周期中，即发生在“执行指令”阶段。从空间上来说，如果取出的代码是指令，那么一定送往指令寄存器，如果取出的代码是数据，那么一定送往运算器。")]),t._v(" "),v("h4",{attrs:{id:"_2-2-3-小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-小结"}},[t._v("#")]),t._v(" 2.2.3 小结")]),t._v(" "),v("p",[t._v("通过以上我们了解了CPU的工作过程。简单来说就是CPU要顺序执行一个程序的指令，首先是控制器获得第一条指令的地址，当CPU取得这个指令并执行后，控制器需要生成下一条要执行的指令的地址。ALU单元负责一些运算操作。下面的FLASH演示了CPU执行一个加法操作的流程。")]),t._v(" "),v("p",[v("a",{attrs:{href:"http://218.5.241.24:8018/C35/Course/ZCYL-HB/WLKJ/jy/Chap05/flash-htm/5.6.swf",target:"_blank",rel:"noopener noreferrer"}},[t._v("CPU工作流程FLASH"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("本文主要是简单介绍了计算机的一些发展历史和通用CPU的结构以及工作流程。加深了我们对冯诺依曼体系的储存程序，顺序执行的理解。无论硬件是什么样子，冯诺依曼计算机的基本原理就是这样。")]),t._v(" "),v("p",[t._v("原文：https://blog.csdn.net/cc_net/article/details/10419645")])])}),[],!1,null,null,null);_.default=r.exports}}]);